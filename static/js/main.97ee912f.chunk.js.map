{"version":3,"sources":["slices/userSlice.js","slices/tokenSlice.js","slices/registerSlice.js","slices/eventSlice.js","store.js","components/Header.js","screens/HomeScreen.js","screens/CreateEventScreen.js","screens/LoginScreen.js","screens/RegisterScreen.js","screens/ManageEventsScreen.js","screens/EventScreen.js","App.js","index.js"],"names":["axios","require","userSlice","createSlice","name","initialState","localStorage","getItem","JSON","parse","email","reducers","set_user_details","state","action","payload","first_name","clear_user_details","actions","get_user_details","token","dispatch","a","get","headers","response","data","setItem","stringify","tokenSlice","loading","error","access_token","refresh_token","login_request","login_success","access","refresh","login_fail","logout_success","login","password","post","undefined","detail","message","removeItem","logout","validateToken","registerSlice","error_code","register_request","register_success","register_fail","eventSlice","create_loading","create_error","create_error_code","created","update_loading","update_error","update_error_code","sending_emails_loading","sending_emails_error","sending_emails_code","create_event_request","create_event_success","create_event_fail","create_event_redirected","update_event_request","update_event_success","update_event_fail","sending_emails_request","sending_emails_error_code","sending_emails_success","sending_emails_fail","sending_emails","subject","body","slug","error_message","status","configureStore","reducer","tokenReducer","user","userReducer","register","registerReducer","event","eventReducer","Header","location","useLocation","useSelector","useDispatch","Navbar","bg","expand","className","Container","to","Brand","Toggle","Collapse","id","Nav","activeKey","pathname","Link","NavDropdown","title","Item","Divider","onClick","HomeScreen","fluid","Row","Col","xs","md","Button","type","variant","size","as","CreateEventScreen","useState","setTitle","date","setDate","budget","setBudget","setLocation","numParticipants","setNumParticipants","participants","setParticipants","includeSelf","setIncludeSelf","errorAlert","setErrorAlert","host_name","host_email","create_event_state","event_loading","event_error","event_error_code","event_created","navigate","useNavigate","useEffect","addParticipantHandler","participants_copy","push","updateParticipantHandler","e","index","field","participant_copy","target","value","createEventHandler","preventDefault","valid_participants","i","length","String","toLowerCase","match","eventInfo","create_event","Form","Alert","Group","controlId","Label","Control","placeholder","onChange","min","Check","inline","label","checked","disabled","map","participant","splice","removeParticipantHandler","sm","ProgressBar","animated","now","LoginScreen","setEmail","setPassword","redirect","search","split","redirect_location","console","log","redirect_slug","fluiadd","loginHandler","RegisterScreen","setName","confirmPassword","setConfirmPassword","registerState","register_loading","register_error","register_error_code","token_loading","token_error","registerHandler","validateEmail","Text","ManageEventsScreen","events","setEvents","getEvents","checkDate","checkEqual","today","Date","test_date","getFullYear","getMonth","getDate","Card","text","style","width","textDecoration","Body","Title","num_participants","EventScreen","namesDrawn","setNamesDrawn","emailsSent","setEmailsSent","setSubject","setBody","sending_emails_state","update_event_state","event_id","useParams","getEvent","Number","participant_details","names_drawn","emails_sent","updateEventHandler","put","update_event","deleteEventHandler","delete","delete_event","drawNamesHandler","sendEmailsHandler","OverlayTrigger","placement","overlay","Tooltip","FloatingLabel","minHeight","App","path","element","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.97ee912f.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst axios = require('axios');\r\n\r\nexport const userSlice = createSlice({\r\n    name: 'user',\r\n    initialState: {\r\n        name: localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\"))[\"first_name\"] : '',\r\n        email: localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\"))[\"email\"] : '',\r\n    },\r\n    reducers: {\r\n        set_user_details: (state, action) => {\r\n            state.name = action.payload.first_name\r\n            state.email = action.payload.email\r\n        },\r\n        clear_user_details: (state) => {\r\n            state.name = ''\r\n            state.email = ''\r\n        },\r\n    },\r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nconst { set_user_details, clear_user_details } = userSlice.actions\r\n\r\nexport const get_user_details = (email, token) => async(dispatch) => {\r\n    const response = await axios.get(`/api/usersByEmail/${email}`, {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${token}`\r\n        }\r\n    })\r\n\r\n    dispatch(set_user_details(response.data))\r\n    localStorage.setItem(\"user\", JSON.stringify(response.data))\r\n}\r\n\r\nexport const logout_user_details = () => dispatch => {\r\n    dispatch(clear_user_details())\r\n    localStorage.removeItem(\"user\")\r\n}\r\n\r\nexport default userSlice.reducer\r\n","import { createSlice } from '@reduxjs/toolkit'\r\nimport { get_user_details, logout_user_details } from './userSlice'\r\n\r\nconst axios = require('axios');\r\n\r\nexport const tokenSlice = createSlice({\r\n    name: 'token',\r\n    initialState: {\r\n        loading: false,\r\n        error: '',\r\n        access_token: localStorage.getItem(\"token\") ? JSON.parse(localStorage.getItem(\"token\"))[\"access\"] : '',\r\n        refresh_token: localStorage.getItem(\"token\") ? JSON.parse(localStorage.getItem(\"token\"))[\"refresh\"] : '',\r\n    },\r\n    reducers: {\r\n        login_request: (state) => {\r\n            state.loading = true\r\n            state.error = ''\r\n        },\r\n        login_success: (state, action) => {\r\n            state.access_token = action.payload.access\r\n            state.refresh_token = action.payload.refresh\r\n            state.loading = false\r\n        },\r\n        login_fail: (state, action) => {\r\n            state.access_token = ''\r\n            state.refresh_token = ''\r\n            state.error = action.payload\r\n            state.loading = false\r\n        },\r\n        logout_success: (state) => {\r\n            state.access_token = ''\r\n            state.refresh_token = ''\r\n        },\r\n    },\r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nconst { login_request, login_success, login_fail, logout_success } = tokenSlice.actions\r\n\r\nexport const login = (email, password) => async(dispatch) => {\r\n\r\n    dispatch(login_request())\r\n\r\n    try {\r\n        const response = await axios.post(\"/api/token/\", {\r\n            \"username\": email,\r\n            \"password\": password\r\n        })\r\n\r\n        dispatch(login_success(response.data))\r\n        localStorage.setItem(\"token\", JSON.stringify(response.data))\r\n\r\n        dispatch(get_user_details(email, response.data.access))\r\n\r\n    } catch (error) {\r\n        dispatch(login_fail(error.response.data.detail === undefined ? error.message : error.response.data.detail))\r\n        localStorage.removeItem(\"token\")\r\n    }\r\n}\r\n\r\nexport const logout = () => (dispatch) => {\r\n    dispatch(logout_success())\r\n    localStorage.removeItem(\"token\")\r\n    dispatch(logout_user_details())\r\n}\r\n\r\nexport const validateToken = (token) => async(dispatch) => {\r\n    try {\r\n        await axios.get(\"/api/token/verify/\", {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${token}`\r\n        }})\r\n\r\n    } catch (error) {\r\n        dispatch(logout())\r\n    }\r\n}\r\n\r\nexport default tokenSlice.reducer\r\n","import { createSlice } from '@reduxjs/toolkit'\r\nimport { login } from './tokenSlice'\r\n\r\nconst axios = require('axios');\r\n\r\nexport const registerSlice = createSlice({\r\n    name: 'register',\r\n    initialState: {\r\n        loading: false,\r\n        error: '',\r\n        error_code: ''\r\n    },\r\n    reducers: {\r\n        register_request: (state) => {\r\n            state.loading = true\r\n            state.error = ''\r\n            state.error_code = ''\r\n        },\r\n        register_success: (state) => {\r\n            state.loading = false\r\n        },\r\n        register_fail: (state, action) => {\r\n            state.error = action.payload.error\r\n            state.error_code = action.payload.error_code\r\n            state.loading = false\r\n        },\r\n    },\r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nconst { register_request, register_success, register_fail } = registerSlice.actions\r\n\r\nexport const register = (name, email, password) => async(dispatch) => {\r\n\r\n    dispatch(register_request())\r\n\r\n    try {\r\n        await axios.post(\"/api/users/\", {\r\n            \"first_name\": name,\r\n            \"email\": email,\r\n            \"password\": password\r\n        })\r\n\r\n        dispatch(register_success())\r\n\r\n        dispatch(login(email, password))\r\n\r\n    } catch (error) {\r\n        const error_message = error.response.data\r\n        const error_code = error.message\r\n        dispatch(register_fail({\r\n            error: error_message,\r\n            error_code: error_code\r\n        }))\r\n    }\r\n}\r\n\r\nexport default registerSlice.reducer\r\n","import { createSlice } from '@reduxjs/toolkit'\r\nimport { logout } from '../slices/tokenSlice'\r\n\r\nconst axios = require('axios');\r\n\r\nexport const eventSlice = createSlice({\r\n    name: 'create_event',\r\n    initialState: {\r\n        create_loading: false,\r\n        create_error: '',\r\n        create_error_code: '',\r\n        created: false,\r\n        update_loading: false,\r\n        update_error: '',\r\n        update_error_code: '',\r\n        sending_emails_loading: false,\r\n        sending_emails_error: '',\r\n        sending_emails_code: '',\r\n    },\r\n    reducers: {\r\n        create_event_request: (state) => {\r\n            state.create_loading = true\r\n            state.create_error = ''\r\n            state.create_error_code = ''\r\n        },\r\n        create_event_success: (state) => {\r\n            state.create_loading = false\r\n            state.created = true\r\n        },\r\n        create_event_fail: (state, action) => {\r\n            state.create_error = action.payload.error\r\n            state.create_error_code = action.payload.error_code\r\n            state.create_loading = false\r\n            state.created = false\r\n        },\r\n        create_event_redirected: (state) => {\r\n            state.created = false\r\n        },\r\n        update_event_request: (state) => {\r\n            state.update_loading = true\r\n            state.update_error_code = ''\r\n            state.update_error = ''\r\n        },\r\n        update_event_success: (state) => {\r\n            state.update_loading = false\r\n        },\r\n        update_event_fail: (state, action) => {\r\n            state.update_error = action.payload.error\r\n            state.update_error_code = action.payload.error_code\r\n            state.update_loading = false\r\n        },\r\n        sending_emails_request: (state) => {\r\n            state.sending_emails_loading = true\r\n            state.sending_emails_error_code = ''\r\n            state.sending_emails_error = ''\r\n        },\r\n        sending_emails_success: (state) => {\r\n            state.sending_emails_loading = false\r\n        },\r\n        sending_emails_fail: (state, action) => {\r\n            state.sending_emails_error = action.payload.error\r\n            state.sending_emails_error_code = action.payload.error_code\r\n            state.sending_emails_loading = false\r\n        },\r\n    },\r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nconst { create_event_request, create_event_success, create_event_fail } = eventSlice.actions\r\n\r\nexport const  { create_event_redirected } = eventSlice.actions\r\n\r\nexport const create_event = (token, eventInfo) => async(dispatch) => {\r\n\r\n    dispatch(create_event_request())\r\n\r\n    try {\r\n        await axios.post(\"/api/events/\", eventInfo, {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${token}`\r\n        }})\r\n\r\n        dispatch(create_event_success())\r\n\r\n    } catch (error) {\r\n        const error_message = error.response.data\r\n        const error_code = error.message\r\n        if (error.response.status === 401) {\r\n            dispatch(logout())\r\n        } else {\r\n            dispatch(create_event_fail({\r\n                error: error_message,\r\n                error_code: error_code\r\n            }))\r\n        }\r\n    }\r\n}\r\n\r\nconst { update_event_request, update_event_success, update_event_fail } = eventSlice.actions\r\n\r\nexport const update_event = (token, eventInfo, slug) => async(dispatch) => {\r\n\r\n    dispatch(update_event_request())\r\n\r\n    try {\r\n        await axios.put(`/api/events/${slug}/`, eventInfo, {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${token}`\r\n        }})\r\n\r\n        dispatch(update_event_success())\r\n\r\n    } catch (error) {\r\n        const error_message = error.response.data\r\n        const error_code = error.message\r\n        if (error.response.status === 401) {\r\n            dispatch(logout())\r\n        } else {\r\n            dispatch(update_event_fail({\r\n                error: error_message,\r\n                error_code: error_code\r\n            }))\r\n        }\r\n    }\r\n}\r\n\r\nexport const delete_event = (token, slug) => async(dispatch) => {\r\n\r\n    try {\r\n        await axios.delete(`/api/events/${slug}/`, {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${token}`\r\n        }})\r\n\r\n    } catch (error) {\r\n        if (error.response.status === 401) {\r\n            dispatch(logout())\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nconst { sending_emails_request, sending_emails_success, sending_emails_fail } = eventSlice.actions\r\n\r\nexport const sending_emails = (token, subject, body, slug) => async(dispatch) => {\r\n\r\n    dispatch(sending_emails_request())\r\n\r\n    try {\r\n        const response = await axios.post(`/api/draw-names/${slug}/`, {\r\n            'subject': subject,\r\n            'body': body\r\n        }, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        })\r\n\r\n        dispatch(sending_emails_success())\r\n\r\n        return response\r\n\r\n    } catch (error) {\r\n        const error_message = error.response.data\r\n        const error_code = error.message\r\n        if (error.response.status === 401) {\r\n            dispatch(logout())\r\n        } else {\r\n            dispatch(sending_emails_fail({\r\n                error: error_message,\r\n                error_code: error_code\r\n            }))\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default eventSlice.reducer\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport tokenReducer from './slices/tokenSlice'\r\nimport userReducer from './slices/userSlice'\r\nimport registerReducer from './slices/registerSlice'\r\nimport eventReducer from './slices/eventSlice'\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        token: tokenReducer,\r\n        user: userReducer,\r\n        register: registerReducer,\r\n        event: eventReducer\r\n    },\r\n})\r\n","import React from 'react'\r\nimport { Navbar, Container, Nav, NavDropdown } from 'react-bootstrap'\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { LinkContainer } from \"react-router-bootstrap\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\n\r\nimport { logout } from '../slices/tokenSlice'\r\n\r\nconst Header = () => {\r\n\r\n    const location = useLocation()\r\n\r\n    const token = useSelector((state) => state.token)\r\n    const user = useSelector((state) => state.user)\r\n    const { name } = user\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        <Navbar bg=\"primary\" expand=\"sm\" className=\"navbar-dark\">\r\n            <Container>\r\n                <LinkContainer to='/'>\r\n                    <Navbar.Brand>Secret Santa</Navbar.Brand>\r\n                </LinkContainer>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav activeKey={location.pathname} className=\"me-auto\">\r\n                        <LinkContainer to='/create-event'>\r\n                            <Nav.Link>Create Event</Nav.Link>\r\n                        </LinkContainer>\r\n\r\n                        {token && name ?\r\n                        <NavDropdown title={name} id=\"basic-nav-dropdown\">\r\n                            {/*<LinkContainer to='/my-profile'>\r\n                                <NavDropdown.Item>My Profile</NavDropdown.Item>\r\n                            </LinkContainer>*/}\r\n                            <LinkContainer to='/manage-events'>\r\n                                <NavDropdown.Item>Manage Events</NavDropdown.Item>\r\n                            </LinkContainer>\r\n                            <NavDropdown.Divider />\r\n                            <NavDropdown.Item onClick={() => dispatch(logout())}>Logout</NavDropdown.Item>\r\n                        </NavDropdown>\r\n                        :\r\n                        <LinkContainer to='/login'>\r\n                            <Nav.Link>Login</Nav.Link>\r\n                        </LinkContainer>\r\n                        }\r\n                        {/*<NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\r\n                            <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\r\n                            <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\r\n                            <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\r\n                            <NavDropdown.Divider />\r\n                            <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\r\n                        </NavDropdown>*/}\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Container>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport { Container, Row, Col, Button } from 'react-bootstrap'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst HomeScreen = () => {\r\n    return (\r\n        <Container className=\"flex-grow-1\" fluid>\r\n            <Row className=\"align-items-center w-100 h-100\">\r\n                <Container>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Col xs=\"auto\">\r\n                            <h1 className=\"text-secondary\">Secret Santa</h1>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"justify-content-center my-3\">\r\n                        <Col xs=\"10\" md=\"6\">\r\n                            <h5 className=\"text-secondary text-center\">Just a simple Secret Santa website you can use with friends and family.</h5>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Col xs=\"auto\">\r\n                            <Button type=\"button\" variant=\"outline-secondary\" size=\"lg\"\r\n                            as={Link} to=\"/create-event\">\r\n                                Get Started\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default HomeScreen\r\n","import React, { useState, useEffect, Fragment } from 'react'\r\nimport { Container, Row, Col, Form, Button, Alert, ProgressBar } from 'react-bootstrap'\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport { create_event, create_event_redirected } from '../slices/eventSlice'\r\nimport { validateToken } from '../slices/tokenSlice'\r\n\r\nconst CreateEventScreen = () => {\r\n\r\n    const [title, setTitle] = useState('')\r\n    const [date, setDate] = useState('')\r\n    const [budget, setBudget] = useState(0)\r\n    const [location, setLocation] = useState('')\r\n    const [numParticipants, setNumParticipants] = useState(3)\r\n    const [participants, setParticipants] = useState([['', ''], ['', '']])\r\n    const [includeSelf, setIncludeSelf] = useState(true)\r\n\r\n    const [errorAlert, setErrorAlert] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const user = useSelector((state) => state.user)\r\n    const host_name = user.name\r\n    const host_email = user.email\r\n\r\n    const token = useSelector((state) => state.token)\r\n    const { access_token } = token\r\n\r\n    const create_event_state = useSelector((state) => state.event)\r\n    const event_loading = create_event_state.create_loading\r\n    const event_error = create_event_state.create_error\r\n    const event_error_code = create_event_state.create_error_code\r\n    const event_created = create_event_state.created\r\n\r\n    // const user = useSelector((state) => state.user)\r\n\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        if (access_token === '') {\r\n            navigate(\"/login?redirect=create-event\")\r\n        }\r\n        else {\r\n            //validate token, if not valid, dispatch logout\r\n            dispatch(validateToken(access_token))\r\n            if (event_created) {\r\n                navigate(\"/manage-events\")\r\n                dispatch(create_event_redirected())\r\n            }\r\n        }\r\n    }, [dispatch, access_token, navigate, event_created])\r\n\r\n    // for handling variable number of participants\r\n    const includeSelfHandler = () => {\r\n        if (includeSelf) {\r\n            setIncludeSelf(false)\r\n\r\n            if (participants.length < 3) {      //if number of participants not self < 3, remove self and add a new entry\r\n                addParticipantHandler()\r\n                setNumParticipants(3)\r\n            } else {                            //if number of participants not self >= 3, remove self only\r\n                setNumParticipants(numParticipants - 1)\r\n            }\r\n        } else {\r\n            setIncludeSelf(true)\r\n            setNumParticipants(numParticipants + 1)\r\n        }\r\n    }\r\n\r\n    const addParticipantHandler = () => {\r\n        setNumParticipants(numParticipants + 1)\r\n        let participants_copy = [...participants]\r\n        participants_copy.push(['',''])\r\n        setParticipants(participants_copy)\r\n    }\r\n\r\n    const updateParticipantHandler = (e, index, field) => {    //index is for which row         field 0 -> name, 1 -> email\r\n        let participant_copy = [...participants]\r\n        participant_copy[index][field] = e.target.value\r\n        setParticipants(participant_copy)\r\n    }\r\n\r\n    const removeParticipantHandler = (index) => {\r\n        setNumParticipants(numParticipants - 1)\r\n        let participant_copy = [...participants]\r\n        participant_copy.splice(index, 1)\r\n        setParticipants(participant_copy)\r\n    }\r\n\r\n    const validateEmail = (email) => {\r\n      return String(email)\r\n        .toLowerCase()\r\n        .match(\r\n          /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n        );\r\n    };\r\n\r\n    const createEventHandler = (e) => {\r\n        e.preventDefault()\r\n        setErrorAlert('')\r\n        // check inputs\r\n        let valid_participants = []\r\n        if (includeSelf) valid_participants.push([host_name, host_email])\r\n        if (title === '') {\r\n            setErrorAlert('Title is empty')\r\n            return\r\n        }\r\n        if (budget < 0) {\r\n            setErrorAlert('Invalid budget')\r\n            return\r\n        }\r\n        for (let i = 0; i < participants.length; i++) {\r\n            if (participants[i][0] !== '' && participants[i][1] !== '') {\r\n                valid_participants.push(participants[i])\r\n            } else if (participants[i][0] === '' && participants[i][1] === '') {\r\n                continue\r\n            } else if (participants[i][0] === '' || participants[i][1] === '') {\r\n                setErrorAlert('Participants not filled up properly')\r\n                return\r\n            }\r\n            if (!validateEmail(participants[i][1])) {\r\n                setErrorAlert('Invalid email address')\r\n                return\r\n            }\r\n        }\r\n        if (valid_participants.length < 3) {\r\n            setErrorAlert('Not enough people for a Secret Santa')\r\n            return\r\n        }\r\n        // dispatch\r\n\r\n        const eventInfo = {\r\n            \"title\": title,\r\n            \"host\": host_email,\r\n            \"num_participants\": valid_participants.length,\r\n            \"participant_details_list\": valid_participants,\r\n            \"date\": date,\r\n            \"budget\": budget,\r\n            \"location\": location,\r\n        }\r\n\r\n        dispatch(create_event(access_token, eventInfo))\r\n    }\r\n\r\n\r\n    return (\r\n        <Container className=\"flex-grow-1\" fluid=\"true\">\r\n            <Row className=\"justify-content-center w-100 h-100\">\r\n                <Col md=\"8\" className=\"align-items-center\">\r\n                    <Container className=\"w-100 h-100\">\r\n                        <Row className=\"align-items-center w-100 h-100\">\r\n                            <Container>\r\n                                <Form>\r\n                                    <Row>\r\n                                        <h1 className=\"text-center\">Create Event</h1>\r\n                                    </Row>\r\n\r\n                                    {errorAlert !== '' &&\r\n                                        <Alert variant=\"danger\">\r\n                                            {errorAlert}\r\n                                        </Alert>\r\n                                    }\r\n\r\n                                    {event_error !== '' &&\r\n                                        <Alert variant=\"danger\">\r\n                                            <p>{event_error}</p>\r\n                                            {event_error_code}\r\n                                        </Alert>\r\n                                    }\r\n\r\n                                    <Form.Group className=\"mb-3\" controlId=\"formBasicTitle\">\r\n                                        <Form.Label>Event Title</Form.Label>\r\n                                        <Form.Control type=\"text\" placeholder=\"Enter event title\"\r\n                                        value={title} onChange={(e) => setTitle(e.target.value)}/>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group className=\"mb-3\" controlId=\"formBasicDate\">\r\n                                        <Form.Label>Date</Form.Label>\r\n                                        <Form.Control type=\"date\" placeholder=\"Enter date\"\r\n                                        value={date} onChange={(e) => setDate(e.target.value)}/>\r\n                                    </Form.Group>\r\n\r\n\r\n                                    <Form.Group className=\"mb-3\" controlId=\"formBasicBudget\">\r\n                                        <Form.Label>Budget</Form.Label>\r\n                                        <Form.Control type=\"number\" placeholder=\"Enter budget\" min=\"0\"\r\n                                        value={budget} onChange={(e) => setBudget(e.target.value)}/>\r\n                                    </Form.Group>\r\n\r\n\r\n                                    <Form.Group className=\"mb-3\" controlId=\"formBasicLocation\">\r\n                                        <Form.Label>Location</Form.Label>\r\n                                        <Form.Control type=\"text\" placeholder=\"Enter location\"\r\n                                        value={location} onChange={(e) => setLocation(e.target.value)}/>\r\n                                    </Form.Group>\r\n\r\n\r\n                                    <Form.Group className=\"mb-3\" controlId=\"formBasicParticipants\">\r\n                                        <Form.Label>Participants</Form.Label>\r\n\r\n                                        <Form.Check inline label=\"Include self?\" name=\"group1\" type=\"checkbox\" className=\"mx-5\"\r\n                                        checked={includeSelf} onChange={() => includeSelfHandler()}/>\r\n\r\n                                            <Row className=\"\">\r\n                                                <Col xs=\"4\">\r\n                                                    <Form.Label>Name</Form.Label>\r\n                                                </Col>\r\n\r\n                                                <Col xs=\"6\">\r\n                                                    <Form.Label>Email</Form.Label>\r\n                                                </Col>\r\n                                            </Row>\r\n\r\n                                            { includeSelf &&\r\n                                            <Row className=\"mb-3\">\r\n                                                <Col xs=\"4\">\r\n                                                    <Form.Group>\r\n                                                        <Form.Control type=\"text\" value={host_name} disabled/>\r\n                                                    </Form.Group>\r\n                                                </Col>\r\n\r\n                                                <Col xs=\"6\">\r\n                                                    <Form.Group>\r\n                                                        <Form.Control type=\"email\" value={host_email} disabled/>\r\n                                                    </Form.Group>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            }\r\n\r\n\r\n                                            {participants.map((participant, index) => (\r\n                                                <Row className=\"mb-3\" key={index}>\r\n                                                    <Col xs=\"4\">\r\n                                                        <Form.Group>\r\n                                                            <Form.Control type=\"name\" placeholder=\"Enter Participant Name\"\r\n                                                            value={participant[0]} onChange={(e) => updateParticipantHandler(e, index, 0)} />\r\n                                                        </Form.Group>\r\n                                                    </Col>\r\n\r\n                                                    <Col xs=\"6\">\r\n                                                        <Form.Group>\r\n                                                            <Form.Control type=\"email\" placeholder=\"Enter Participant Email\"\r\n                                                            value={participant[1]} onChange={(e) => updateParticipantHandler(e, index, 1)} />\r\n                                                        </Form.Group>\r\n                                                    </Col>\r\n\r\n                                                    <Col xs=\"2\">\r\n                                                        <Button variant=\"outline-danger\" type=\"button\"\r\n                                                        onClick={() => removeParticipantHandler(index)} disabled={numParticipants <= 3}>\r\n                                                            Remove\r\n                                                        </Button>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            ))}\r\n\r\n                                            <Col className=\"mb-3\">\r\n                                                <Button variant=\"outline-primary\" type=\"button\" onClick={() => addParticipantHandler()}>\r\n                                                    Add Participant\r\n                                                </Button>\r\n                                            </Col>\r\n\r\n                                    </Form.Group>\r\n\r\n\r\n\r\n                                    <Row className=\"justify-content-center\">\r\n                                        <Col sm=\"auto\" md=\"auto\">\r\n                                            <Button variant=\"primary\" type=\"submit\" onClick={(e) => createEventHandler(e)}>\r\n                                                Create Event\r\n                                            </Button>\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                    {event_loading &&\r\n                                        <Fragment>\r\n                                        <p>Creating Event</p>\r\n                                        <ProgressBar animated now={100} variant=\"success\" />\r\n                                        </Fragment>\r\n                                    }\r\n                                </Form>\r\n                            </Container>\r\n                        </Row>\r\n                    </Container>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default CreateEventScreen\r\n","import React, { useState, useEffect, Fragment } from 'react'\r\nimport { Container, Row, Col, Form, Button, Alert, ProgressBar } from 'react-bootstrap'\r\nimport { Link, useNavigate, useLocation } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport { login } from '../slices/tokenSlice'\r\n\r\nconst LoginScreen = () => {\r\n\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n\r\n    const token = useSelector((state) => state.token)\r\n    const { error, loading, access_token } = token\r\n    const dispatch = useDispatch()\r\n\r\n    const location = useLocation()\r\n    const redirect = location.search.split('=')[1]\r\n    if (redirect) {\r\n        localStorage.setItem('redirect', redirect)\r\n    }\r\n\r\n\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        if (access_token) {\r\n            const redirect_location = localStorage.getItem('redirect')\r\n            console.log(redirect_location)\r\n            if (redirect_location) {\r\n                const redirect_slug = redirect_location.split(\"manage-events-\")\r\n                console.log(redirect_slug)\r\n                if (redirect_slug.length > 1) {\r\n                    navigate(`/manage-events/${redirect_slug[1]}`)\r\n                } else if (redirect_slug[0] === 'manage-events') {\r\n                    navigate('/manage-events')\r\n                } else {\r\n                    navigate('/create-event')\r\n                }\r\n            } else {\r\n                navigate('/create-event')\r\n            }\r\n            localStorage.removeItem('redirect')\r\n        }\r\n    }, [redirect, access_token, navigate])\r\n\r\n    const loginHandler = (e) => {\r\n        e.preventDefault()\r\n        navigate(\"/login\")\r\n        dispatch(login(email, password))\r\n    }\r\n\r\n\r\n    return (\r\n        <Container className=\"flex-grow-1\" fluiadd=\"true\">\r\n            <Row className=\"justify-content-center w-100 h-100\">\r\n                <Col md=\"4\" className=\"align-items-center\">\r\n                    <Container className=\"w-100 h-100\">\r\n                        <Row className=\"align-items-center w-100 h-100\">\r\n                            <Container>\r\n                                <Form>\r\n                                    <h1>Sign in</h1>\r\n\r\n                                    {error &&\r\n                                        <Alert variant=\"danger\">\r\n                                            {error}\r\n                                        </Alert>\r\n                                    }\r\n\r\n                                    {redirect === \"create-event\" &&\r\n                                        <Alert variant=\"warning\">\r\n                                            Sign In to Create an Event!\r\n                                        </Alert>\r\n                                    }\r\n\r\n                                    <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n                                        <Form.Label>Email address</Form.Label>\r\n                                        <Form.Control type=\"email\" placeholder=\"Enter email\"\r\n                                        value={email} onChange={(e) => setEmail(e.target.value)}/>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\r\n                                        <Form.Label>Password</Form.Label>\r\n                                        <Form.Control type=\"password\" placeholder=\"Password\"\r\n                                        value={password} onChange={(e) => setPassword(e.target.value)}/>\r\n                                    </Form.Group>\r\n\r\n                                    <Button variant=\"primary\" type=\"submit\" onClick={(e) => loginHandler(e)} disabled={loading}>\r\n                                        Login\r\n                                    </Button>\r\n\r\n                                    <Row className=\"mt-3\">\r\n                                        <Col>\r\n                                            New User? <Link to=\"/register\">Register</Link>\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n\r\n                                    {loading &&\r\n                                        <Fragment>\r\n                                        <p>Logging in...</p>\r\n                                        <ProgressBar animated now={100} variant=\"success\" />\r\n                                        </Fragment>\r\n                                    }\r\n                                </Form>\r\n                            </Container>\r\n                        </Row>\r\n                    </Container>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default LoginScreen\r\n","import React, { useState, useEffect, Fragment } from 'react'\r\nimport { Container, Row, Col, Form, Button, Alert, ProgressBar } from 'react-bootstrap'\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport { register } from '../slices/registerSlice'\r\n\r\nconst RegisterScreen = () => {\r\n\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [errorAlert, setErrorAlert] = useState('')\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const registerState = useSelector((state) => state.register)\r\n    const register_loading = registerState.loading\r\n    const register_error = registerState.error\r\n    const register_error_code = registerState.error_code\r\n\r\n    const token = useSelector((state) => state.token)\r\n    const token_loading = token.loading\r\n    const token_error = token.error\r\n    const access_token = token.access_token\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const validateEmail = (email) => {\r\n      return String(email)\r\n        .toLowerCase()\r\n        .match(\r\n          /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n        );\r\n    };\r\n\r\n    const registerHandler = (e) => {\r\n        e.preventDefault()\r\n        if (!validateEmail(email)) {\r\n            setErrorAlert('Invalid email address')\r\n            return\r\n        }\r\n        if (name === '' || email === '' || password === '' || confirmPassword === '') {\r\n            setErrorAlert('One or more fields are empty')\r\n        } else {\r\n            if (password === confirmPassword) {\r\n                setErrorAlert('')\r\n                dispatch(register(name, email, password))\r\n            } else {\r\n                setErrorAlert('Passwords do not match')\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (access_token) {\r\n            navigate(\"/create-event\")\r\n        }\r\n    }, [access_token, navigate])\r\n\r\n    return (\r\n        <Container className=\"flex-grow-1\" fluid>\r\n            <Row className=\"justify-content-center w-100 h-100\">\r\n                <Col md=\"4\" className=\"align-items-center\">\r\n                    <Container className=\"w-100 h-100\">\r\n                        <Row className=\"align-items-center w-100 h-100\">\r\n                            <Container>\r\n                                <Form>\r\n                                    <h1>Register</h1>\r\n\r\n                                    {errorAlert !== '' &&\r\n                                        <Alert variant=\"danger\">\r\n                                            {errorAlert}\r\n                                        </Alert>\r\n                                    }\r\n\r\n                                    {register_error !== '' &&\r\n                                        <Alert variant=\"danger\">\r\n                                            <p>{register_error}</p>\r\n                                            {register_error_code}\r\n                                        </Alert>\r\n                                    }\r\n\r\n                                    {token_error !== '' &&\r\n                                        <Alert variant=\"danger\">\r\n                                            {token_error}\r\n                                        </Alert>\r\n                                    }\r\n\r\n                                    <Form.Group className=\"mb-3\">\r\n                                        <Form.Label>Name</Form.Label>\r\n                                        <Form.Control type=\"email\" placeholder=\"Enter name\"\r\n                                        value={name} onChange={(e) => setName(e.target.value)}/>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n                                        <Form.Label>Email address</Form.Label>\r\n                                        <Form.Control type=\"email\" placeholder=\"Enter email\"\r\n                                        value={email} onChange={(e) => setEmail(e.target.value)}/>\r\n                                        <Form.Text className=\"text-muted\">\r\n                                        We'll never share your email with anyone else.\r\n                                        </Form.Text>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\r\n                                        <Form.Label>Password</Form.Label>\r\n                                        <Form.Control type=\"password\" placeholder=\"Password\"\r\n                                        value={password} onChange={(e) => setPassword(e.target.value)}/>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group className=\"mb-3\" controlId=\"formBasicConfirmPassword\">\r\n                                        <Form.Label>Confirm Password</Form.Label>\r\n                                        <Form.Control type=\"password\" placeholder=\"Confirm Password\"\r\n                                        value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)}/>\r\n                                    </Form.Group>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                    <Button variant=\"primary\" type=\"submit\" onClick={(e) => registerHandler(e)}>\r\n                                        Sign up\r\n                                    </Button>\r\n\r\n                                    <Row className=\"my-3\">\r\n                                        <Col>\r\n                                            New User? <Link to=\"/login\">Login</Link>\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                    {register_loading &&\r\n                                        <Fragment>\r\n                                        <p>Registering...</p>\r\n                                        <ProgressBar animated now={50} variant=\"success\"/>\r\n                                        </Fragment>\r\n                                    }\r\n\r\n                                    {token_loading &&\r\n                                        <Fragment>\r\n                                        <p>Logging in...</p>\r\n                                        <ProgressBar animated now={100} variant=\"success\" />\r\n                                        </Fragment>\r\n                                    }\r\n\r\n                                </Form>\r\n                            </Container>\r\n                        </Row>\r\n                    </Container>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default RegisterScreen\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Container, Row, Card, Alert } from 'react-bootstrap'\r\nimport { useNavigate, useLocation, Link } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport { validateToken } from '../slices/tokenSlice'\r\n\r\nconst ManageEventsScreen = () => {\r\n\r\n    const [events, setEvents] = useState([])\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const location = useLocation()\r\n    const redirect = location.search.split('=')[1]\r\n\r\n    const token = useSelector((state) => state.token)\r\n    const { access_token } = token\r\n\r\n    // const user = useSelector((state) => state.user)\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const axios = require('axios')\r\n\r\n    const getEvents = async() => {\r\n        const response = await axios.get(\"/api/events/\", {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${access_token}`\r\n            }\r\n        })\r\n        setEvents(response.data)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (access_token === '') {\r\n            navigate(\"/login?redirect=manage-events\")\r\n        }\r\n        else {\r\n            //validate token, if not valid, dispatch logout\r\n            dispatch(validateToken(access_token))\r\n            getEvents()\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [dispatch, access_token, navigate])\r\n\r\n    const checkDate = (checkEqual, date) => {\r\n        const today = new Date()\r\n        const test_date = new Date(date)\r\n        if (checkEqual) {\r\n            return today.getFullYear() === test_date.getFullYear() && today.getMonth() === test_date.getMonth() && today.getDate() === test_date.getDate();\r\n        } else {\r\n            return test_date > today\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container className=\"flex-grow-1 flex-wrap flex-row\">\r\n            {redirect === \"event\" &&\r\n                <Alert variant=\"warning\">\r\n                    You are not authorised to view that event!\r\n                </Alert>\r\n            }\r\n            <Row className=\"justify-content-center\">\r\n                {events.map((event) => (\r\n                    <Card text=\"light\" style={{ width: '18rem', textDecoration: 'none' }} className=\"my-5 mx-5\" as={Link} to={`/manage-events/${event.id}`}\r\n                    key={event.id} bg={!event.date ? \"info\" : checkDate(true, event.date) ? \"warning\" : checkDate(false, event.date) ? \"primary\" : \"secondary\"}>\r\n                        <Card.Header>{event.date ? event.date : \"Date Unconfirmed\"}</Card.Header>\r\n                        <Card.Body>\r\n                            <Card.Title>{event.title}</Card.Title>\r\n                            <Card.Text>{event.location === '' ? \"Location Unconfirmed\" : event.location}</Card.Text>\r\n                            <Card.Text>{`${event.num_participants} Participants`}</Card.Text>\r\n                            <Card.Text>{event.budget === \"0.00\" ? \"Budget Unconfirmed\" : `Budget: ${event.budget}`}</Card.Text>\r\n                        </Card.Body>\r\n                    </Card>\r\n                ))\r\n                }\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default ManageEventsScreen\r\n","import React, { useState, useEffect, Fragment } from 'react'\r\nimport { Container, Row, Col, Form, Button, Alert, ProgressBar, FloatingLabel, OverlayTrigger, Tooltip } from 'react-bootstrap'\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport { update_event, delete_event, sending_emails } from '../slices/eventSlice'\r\nimport { validateToken } from '../slices/tokenSlice'\r\n\r\nconst EventScreen = () => {\r\n\r\n    const [title, setTitle] = useState('')\r\n    const [date, setDate] = useState('')\r\n    const [budget, setBudget] = useState(0)\r\n    const [location, setLocation] = useState('')\r\n    const [numParticipants, setNumParticipants] = useState(3)\r\n    const [participants, setParticipants] = useState([['', ''], ['', '']])\r\n    const [namesDrawn, setNamesDrawn] = useState(false)\r\n    const [emailsSent, setEmailsSent] = useState(false)\r\n\r\n    const [subject, setSubject] = useState('')\r\n    const [body, setBody] = useState('')\r\n\r\n    const [errorAlert, setErrorAlert] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const user = useSelector((state) => state.user)\r\n    const host_name = user.name\r\n    const host_email = user.email\r\n\r\n    const token = useSelector((state) => state.token)\r\n    const { access_token } = token\r\n\r\n    const sending_emails_state = useSelector((state) => state.event)\r\n    const { sending_emails_loading, sending_emails_error, sending_emails_error_code } = sending_emails_state\r\n\r\n    const update_event_state = useSelector((state) => state.event)\r\n    const event_loading = update_event_state.update_loading\r\n    const event_error = update_event_state.update_error\r\n    const event_error_code = update_event_state.update_error_code\r\n\r\n    // const user = useSelector((state) => state.user)\r\n\r\n    const navigate = useNavigate()\r\n    const params = useParams()\r\n    const event_id = params.slug\r\n\r\n    const axios = require(\"axios\")\r\n\r\n    const getEvent = async() => {\r\n        try {\r\n            const response = await axios.get(`/api/events/${event_id}/`, {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${access_token}`\r\n                }\r\n            })\r\n\r\n            setTitle(response.data.title)\r\n            setDate(response.data.date)\r\n            setBudget(Number(response.data.budget))\r\n            setLocation(response.data.location)\r\n            setNumParticipants(response.data.num_participants)\r\n            setParticipants(response.data.participant_details)\r\n            setNamesDrawn(response.data.names_drawn)\r\n            setEmailsSent(response.data.emails_sent)\r\n            setSubject(`Secret Santa: ${response.data.title}`)\r\n            setBody(`Hi $giver,\\n\\nYou've been invited to a Secret Santa organised by ${host_name}.\\n\\nDate: ${response.data.date ? response.data.date : \"Date Unconfirmed\"}\\nBudget: ${response.data.budget !== '0.00' ? response.data.budget : \"Budget Unconfirmed\"}\\nLocation: ${response.data.location !== '' ? response.data.location : \"Location Unconfirmed\"}\\n\\nYou will be giving your gift to $receiver.`)\r\n\r\n        } catch (error) {\r\n            if (error.response.status === 401) navigate(\"/manage-events?redirect=event\")\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        if (access_token === '') {\r\n            navigate(`/login?redirect=manage-events-${event_id}`)\r\n        }\r\n        else {\r\n            //validate token, if not valid, dispatch logout\r\n            dispatch(validateToken(access_token))\r\n            getEvent()\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [dispatch, access_token, navigate])\r\n\r\n    // for handling variable number of participants\r\n    const addParticipantHandler = () => {\r\n        setNumParticipants(numParticipants + 1)\r\n        let participants_copy = [...participants]\r\n        participants_copy.push(['',''])\r\n        setParticipants(participants_copy)\r\n    }\r\n\r\n    const updateParticipantHandler = (e, index, field) => {    //index is for which row         field 0 -> name, 1 -> email\r\n        let participant_copy = [...participants]\r\n        participant_copy[index][field] = e.target.value\r\n        setParticipants(participant_copy)\r\n    }\r\n\r\n    const removeParticipantHandler = (index) => {\r\n        setNumParticipants(numParticipants - 1)\r\n        let participant_copy = [...participants]\r\n        participant_copy.splice(index, 1)\r\n        setParticipants(participant_copy)\r\n    }\r\n\r\n    const validateEmail = (email) => {\r\n      return String(email)\r\n        .toLowerCase()\r\n        .match(\r\n          /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n        );\r\n    };\r\n\r\n    const updateEventHandler = (e) => {\r\n        e.preventDefault()\r\n        setErrorAlert('')\r\n        // check inputs\r\n        let valid_participants = []\r\n        if (title === '') {\r\n            setErrorAlert('Title is empty')\r\n            return\r\n        }\r\n        if (budget < 0) {\r\n            setErrorAlert('Invalid budget')\r\n            return\r\n        }\r\n        for (let i = 0; i < participants.length; i++) {\r\n            if (participants[i][0] !== '' && participants[i][1] !== '') {\r\n                valid_participants.push(participants[i])\r\n            } else if (participants[i][0] === '' && participants[i][1] === '') {\r\n                continue\r\n            } else if (participants[i][0] === '' || participants[i][1] === '') {\r\n                setErrorAlert('Participants not filled up properly')\r\n                return\r\n            }\r\n            if (!validateEmail(participants[i][1])) {\r\n                setErrorAlert('Invalid email address')\r\n                return\r\n            }\r\n        }\r\n        if (valid_participants.length < 3) {\r\n            setErrorAlert('Not enough people for a Secret Santa')\r\n            return\r\n        }\r\n        // dispatch\r\n\r\n        const eventInfo = {\r\n            \"title\": title,\r\n            \"host\": host_email,\r\n            \"num_participants\": valid_participants.length,\r\n            \"participant_details_list\": valid_participants,\r\n            \"date\": date,\r\n            \"budget\": budget,\r\n            \"location\": location,\r\n        }\r\n\r\n        dispatch(update_event(access_token, eventInfo, event_id))\r\n    }\r\n\r\n    const deleteEventHandler = () => {\r\n        dispatch(delete_event(access_token, event_id))\r\n        navigate(\"/manage-events\")\r\n    }\r\n\r\n    const drawNamesHandler = async() => {\r\n        try {\r\n            const response = await axios.get(`/api/draw-names/${event_id}/`, {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${access_token}`\r\n                }\r\n            })\r\n            setNamesDrawn(response.data.names_drawn)\r\n        } catch (error) {\r\n            if (error.response.status === 401) navigate(\"/manage-events?redirect=event\")\r\n        }\r\n    }\r\n\r\n    const sendEmailsHandler = async() => {\r\n        const response = await dispatch(sending_emails(access_token, subject, body, event_id))\r\n        try {\r\n            setEmailsSent(response.data.emails_sent)\r\n        } catch {\r\n            setEmailsSent(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container className=\"flex-grow-1\" fluid=\"true\">\r\n            <Row className=\"justify-content-center w-100 h-100\">\r\n                <Col md=\"8\" className=\"align-items-center\">\r\n                    <Container className=\"w-100 h-100\">\r\n                        <Row className=\"w-100 h-100 justify-content-between\">\r\n                            <Col sm=\"12\" md=\"5\">\r\n                                <Container>\r\n                                    <Form>\r\n                                        <Row>\r\n                                            <h1 className=\"text-center\">Update Event</h1>\r\n                                        </Row>\r\n\r\n                                        {errorAlert !== '' &&\r\n                                            <Alert variant=\"danger\">\r\n                                                {errorAlert}\r\n                                            </Alert>\r\n                                        }\r\n\r\n                                        {event_error !== '' &&\r\n                                            <Alert variant=\"danger\">\r\n                                                <p>{event_error}</p>\r\n                                                {event_error_code}\r\n                                            </Alert>\r\n                                        }\r\n\r\n                                        <Form.Group className=\"mb-3\" controlId=\"formBasicTitle\">\r\n                                            <Form.Label>Event Title</Form.Label>\r\n                                            <Form.Control type=\"text\" placeholder=\"Enter event title\"\r\n                                            value={title} onChange={(e) => setTitle(e.target.value)}/>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group className=\"mb-3\" controlId=\"formBasicDate\">\r\n                                            <Form.Label>Date</Form.Label>\r\n                                            <Form.Control type=\"date\" placeholder=\"Enter date\"\r\n                                            value={date} onChange={(e) => setDate(e.target.value)}/>\r\n                                        </Form.Group>\r\n\r\n\r\n                                        <Form.Group className=\"mb-3\" controlId=\"formBasicBudget\">\r\n                                            <Form.Label>Budget</Form.Label>\r\n                                            <Form.Control type=\"number\" placeholder=\"Enter budget\" min=\"0\"\r\n                                            value={budget} onChange={(e) => setBudget(e.target.value)}/>\r\n                                        </Form.Group>\r\n\r\n\r\n                                        <Form.Group className=\"mb-3\" controlId=\"formBasicLocation\">\r\n                                            <Form.Label>Location</Form.Label>\r\n                                            <Form.Control type=\"text\" placeholder=\"Enter location\"\r\n                                            value={location} onChange={(e) => setLocation(e.target.value)}/>\r\n                                        </Form.Group>\r\n\r\n\r\n                                        <Form.Group className=\"mb-3\" controlId=\"formBasicParticipants\">\r\n                                            <Form.Label>Participants</Form.Label>\r\n\r\n                                                <Row className=\"\">\r\n                                                    <Col xs=\"4\">\r\n                                                        <Form.Label>Name</Form.Label>\r\n                                                    </Col>\r\n\r\n                                                    <Col xs=\"6\">\r\n                                                        <Form.Label>Email</Form.Label>\r\n                                                    </Col>\r\n                                                </Row>\r\n\r\n\r\n                                                {participants.map((participant, index) => (\r\n                                                    <Row className=\"mb-3\" key={index}>\r\n                                                        <Col xs=\"4\">\r\n                                                            <Form.Group>\r\n                                                                <Form.Control type=\"name\" placeholder=\"Enter Participant Name\"\r\n                                                                value={participant[0]} onChange={(e) => updateParticipantHandler(e, index, 0)} />\r\n                                                            </Form.Group>\r\n                                                        </Col>\r\n\r\n                                                        <Col xs=\"6\">\r\n                                                            <Form.Group>\r\n                                                                <Form.Control type=\"email\" placeholder=\"Enter Participant Email\"\r\n                                                                value={participant[1]} onChange={(e) => updateParticipantHandler(e, index, 1)} />\r\n                                                            </Form.Group>\r\n                                                        </Col>\r\n\r\n                                                        <Col xs=\"2\">\r\n                                                            <Button variant=\"outline-danger\" type=\"button\"\r\n                                                            onClick={() => removeParticipantHandler(index)} disabled={numParticipants <= 3}>\r\n                                                                Remove\r\n                                                            </Button>\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                ))}\r\n\r\n                                                <Col className=\"mb-3\">\r\n                                                    <Button variant=\"outline-primary\" type=\"button\" onClick={() => addParticipantHandler()}>\r\n                                                        Add Participant\r\n                                                    </Button>\r\n                                                </Col>\r\n\r\n                                        </Form.Group>\r\n\r\n\r\n\r\n                                        <Row className=\"justify-content-center mb-5\">\r\n                                            <Col xs=\"4\" md=\"auto\" className=\"mx-3\">\r\n                                                <Row className=\"justify-content-center\">\r\n                                                    <Button variant=\"primary\" type=\"submit\" onClick={(e) => updateEventHandler(e)}>\r\n                                                        Update\r\n                                                    </Button>\r\n                                                </Row>\r\n                                            </Col>\r\n                                            <Col xs=\"4\" md=\"auto\">\r\n                                                <Row className=\"justify-content-center\">\r\n                                                    <Button variant=\"secondary\" type=\"submit\" onClick={(e) => deleteEventHandler(e)}>\r\n                                                        Delete\r\n                                                    </Button>\r\n                                                </Row>\r\n                                            </Col>\r\n                                        </Row>\r\n\r\n                                        {event_loading &&\r\n                                            <Fragment>\r\n                                            <p>Updating Event</p>\r\n                                            <ProgressBar animated now={100} variant=\"success\" />\r\n                                            </Fragment>\r\n                                        }\r\n                                    </Form>\r\n                                </Container>\r\n                            </Col>\r\n\r\n\r\n                            <Col sm=\"12\" md=\"5\">\r\n                                <Row>\r\n                                    <h1 className=\"text-center\">Manage Event</h1>\r\n                                </Row>\r\n                                <Row className=\"mt-3\">\r\n                                    { namesDrawn ?\r\n                                        <h6 className=\"text-center\">Names have already been drawn. Continue to next step.</h6>\r\n                                        :\r\n                                        <h6 className=\"text-center\">Once details of the event have been finalised, click the button to draw names for secret santa participants.</h6>\r\n                                    }\r\n                                </Row>\r\n                                <Row className=\"justify-content-center\">\r\n                                    <Col sm=\"4\" md=\"auto\">\r\n                                        <Button variant=\"outline-primary\" type=\"button\"\r\n                                        onClick={() => drawNamesHandler()} disabled={namesDrawn}>\r\n                                            Draw Names\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                {sending_emails_error !== '' &&\r\n                                    <Alert variant=\"danger\">\r\n                                        <p>{sending_emails_error}</p>\r\n                                        {sending_emails_error_code}\r\n                                    </Alert>\r\n                                }\r\n\r\n                                <Row className=\"mt-5\">\r\n                                    { emailsSent ?\r\n                                        <h6 className=\"text-center\">Emails have been sent out. Enjoy your secret santa!</h6>\r\n                                        :\r\n                                        <h6 className=\"text-center\">Once names have been drawn, click the button to send out the emails containing details for the secret santa.</h6>\r\n                                    }\r\n                                </Row>\r\n                                { !emailsSent &&\r\n                                    <OverlayTrigger\r\n                                    placement=\"right\"\r\n                                    overlay={\r\n                                        <Tooltip id={`tooltip-right`}>\r\n                                            Use $giver and $receiver as placeholder for giver and receiver names.\r\n                                        </Tooltip>\r\n                                    }>\r\n                                        <Form>\r\n                                            <FloatingLabel controlId=\"floatingTextarea\" label=\"Subject\" className=\"mb-3\">\r\n                                                <Form.Control type=\"text\" value={subject} onChange={(e) => setSubject(e.target.value)}/>\r\n                                            </FloatingLabel>\r\n                                                <FloatingLabel controlId=\"floatingTextarea2\" label=\"Body\">\r\n                                                    <Form.Control as=\"textarea\"\r\n                                                    value={body}\r\n                                                    onChange={(e) => setBody(e.target.value)}\r\n                                                    style={{ minHeight: '300px' }}\r\n                                                    />\r\n                                                </FloatingLabel>\r\n                                        </Form>\r\n                                    </OverlayTrigger>\r\n                                }\r\n                                <Row className=\"justify-content-center mt-3\">\r\n                                    <Col sm=\"4\" md=\"auto\">\r\n                                        <Button variant=\"outline-primary\" type=\"button\"\r\n                                        onClick={() => sendEmailsHandler()} disabled={emailsSent || !namesDrawn}>\r\n                                            Send Emails\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n\r\n\r\n                                {sending_emails_loading &&\r\n                                    <Row className=\"mt-3\">\r\n                                    <p>Sending out emails. This may take a while...</p>\r\n                                    <ProgressBar animated now={100} variant=\"success\"/>\r\n                                    </Row>\r\n                                }\r\n\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default EventScreen\r\n","import React from 'react'\nimport { Routes, Route } from \"react-router-dom\";\n\nimport Header from './components/Header'\nimport HomeScreen from './screens/HomeScreen'\nimport CreateEventScreen from './screens/CreateEventScreen'\nimport LoginScreen from './screens/LoginScreen'\nimport RegisterScreen from './screens/RegisterScreen'\nimport ManageEventsScreen from './screens/ManageEventsScreen'\nimport EventScreen from './screens/EventScreen'\n\nfunction App() {\n    return (\n        <div className=\"d-flex flex-column vh-100\" fluid=\"true\">\n            <Header />\n            <Routes>\n                <Route path=\"/\" element={<HomeScreen />}/>\n                <Route path=\"/create-event\" element={<CreateEventScreen />}/>\n                <Route path=\"/login\" element={<LoginScreen />}/>\n                <Route path=\"/register\" element={<RegisterScreen />}/>\n                <Route path=\"/manage-events\" element={<ManageEventsScreen />}/>\n                <Route path=\"/manage-events/:slug\" element={<EventScreen />}/>\n            </Routes>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nimport './bootstrap.min.css'\nimport './index.css';\n\nimport App from './App';\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}